name: Extract and Release

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: "ROM URL"
        default: "https://builds.paranoidandroid.co/aospa-topaz-2-bladerunner_48m-20230820-image.zip"
      DEVICE_NAME:
        description: "Device Name"
        default: "oneplus9"

jobs:
  extract-rom:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full android-tools-fsutils

      - name: Download ROM file
        run: |
          curl -L ${{ github.event.inputs.ROM_URL }} --output rom.zip
          echo "ROM file downloaded and renamed to rom.zip."

      - name: Extract ROM using 7-Zip
        run: |
          7z x rom.zip -orom_extracted
          echo "ROM extracted to rom_extracted directory."

      - name: Extract vendor.img using 7-Zip
        run: |
          cd rom_extracted
          7z x vendor.img -o vendor_extracted || echo "Failed to extract vendor.img with 7-Zip, may not be a valid archive."

      - name: Convert vendor.img to raw image
        run: |
          if [ -f vendor.img ]; then
            simg2img vendor.img vendor_raw.img
            echo "Converted vendor.img to vendor_raw.img."
          else
            echo "::error:: vendor.img not found!"
            exit 1
          fi

      - name: Mount and extract build.prop
        run: |
          mkdir -p vendor_mount
          sudo mount -o loop vendor_raw.img vendor_mount || echo "::error:: Failed to mount vendor_raw.img"
          if [ -f vendor_mount/build.prop ]; then
            echo "build.prop found. Extracting device info..."
            MANUFACTURER=$(grep -oP 'ro.product.manufacturer=\K.*' vendor_mount/build.prop)
            MODEL=$(grep -oP 'ro.product.model=\K.*' vendor_mount/build.prop)
            FINGERPRINT=$(grep -oP 'ro.build.fingerprint=\K.*' vendor_mount/build.prop)
            BRAND=$(grep -oP 'ro.product.brand=\K.*' vendor_mount/build.prop)
            PRODUCT=$(grep -oP 'ro.product.name=\K.*' vendor_mount/build.prop)
            DEVICE=$(grep -oP 'ro.product.device=\K.*' vendor_mount/build.prop)
            SECURITY_PATCH=$(grep -oP 'ro.build.version.security_patch=\K.*' vendor_mount/build.prop)
            FIRST_API_LEVEL=$(grep -oP 'ro.product.first_api_level=\K.*' vendor_mount/build.prop)

            # Create JSON file
            echo "{
              \"MANUFACTURER\": \"$MANUFACTURER\",
              \"MODEL\": \"$MODEL\",
              \"FINGERPRINT\": \"$FINGERPRINT\",
              \"BRAND\": \"$BRAND\",
              \"PRODUCT\": \"$PRODUCT\",
              \"DEVICE\": \"$DEVICE\",
              \"SECURITY_PATCH\": \"$SECURITY_PATCH\",
              \"FIRST_API_LEVEL\": \"$FIRST_API_LEVEL\"
            }" > extracted_info.json

            echo "Extracted info saved to extracted_info.json."
          else
            echo "::error:: build.prop not found!"
            exit 1
          fi

      - name: Upload extracted_info.json to Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: extracted_info.json
          name: ${{ github.event.inputs.DEVICE_NAME }}-extracted-info-${{ github.run_id }}
          tag_name: ${{ github.run_id }}
